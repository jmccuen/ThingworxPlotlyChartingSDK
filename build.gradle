import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.HttpMultipartMode
import org.apache.http.entity.mime.content.FileBody
import org.apache.http.entity.StringEntity
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*
import com.eriwen.gradle.js.tasks.MinifyJsTask
import com.eriwen.gradle.js.tasks.CombineJsTask


buildscript {
   repositories {
     mavenCentral()
   }
   dependencies {
      classpath 'org.apache.httpcomponents:httpmime:4.5.2'
      classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
      //classpath 'com.google.javascript:closure-compiler:v20171203'
   }
}

plugins {
  id "com.eriwen.gradle.js" version "2.14.1"
}

repositories {
  mavenCentral() //or jcenter()
}
configurations {
  closureCompiler
}
dependencies {
  closureCompiler 'com.google.javascript:closure-compiler:v20180506'
}

// Set the properties accordingly
project.ext {
    baseDir = projectDir
    uiDir = "${baseDir}/ui"
    libDir = "${baseDir}/lib"
    configDir = "${baseDir}/metadata.xml"
    entitiesDir = "${baseDir}/Entities"
    zipDir = "${baseDir}/zip"

    // Used for deleting
    packageName = "PlotlyChartingSDK"
    
    // Used for uploading - the address of the Thingworx server
    thingworxServerRoot = "http://localhost:80"
    // thingworxServerRoot = "http://localhost:8215"
    // Used for uploading - the username of the Thingworx server user through which the import will be performed
    thingworxUser = "JamesM"
    // Used for uploading - the password of the Thingworx server user through which the import will be performed
    thingworxPass = "mjames"
    // thingworxPass = "Administrator12345"

    // Used for building the release package
    // The files in this array will not be combined and minified
    skipJsFiles = ["**/plotly-1.4.52.min.js"]

    // Used in any build
    // The files to remove from the extension
    removeFiles = []
}

task increaseVersionNumber() {
    def file = "${baseDir}/metadata.xml"
    def parser = new groovy.util.XmlParser(false,true);
    def xml = parser.parse(file)

    def currentVersion = xml.ExtensionPackages.ExtensionPackage.@packageVersion[0];

    def versionComponents = currentVersion.split('\\.');

    def minorVersion = Integer.parseInt(versionComponents[versionComponents.length - 1]);

    versionComponents[versionComponents.length - 1] = String.valueOf(minorVersion);
    
    version = String.join('.', versionComponents)
    xml.ExtensionPackages.ExtensionPackage.@packageVersion = version
    println 'Updated to version ' + project.version
    PrintWriter pw = new PrintWriter(new File(file))
    pw.write(groovy.xml.XmlUtil.serialize(xml))
    pw.close()
}

task copyUiFiles {
    doLast {
        

        copy {
            from uiDir
            into "${buildDir}/zip/ui/"
        }
        
        copy {
            from "${project.ext.configDir}"
            into "${buildDir}/zip/"
        }

        // Remove unneeded files
        project.ext.removeFiles.collect([]) { fileName ->
            file("${buildDir}/zip/ui/${fileName}").delete();
        }

        if (project.hasProperty('buildRelease')) { 
            // Combine the files into single minified scripts as follows:
            // - all runtime files are combined into a single runtime script
            // - all design time files are combined into a single design script
            // - all files used in both design and runtime are combined into a single script

            def XMLParser = new groovy.util.XmlParser(false, true);
            def metadata = XMLParser.parse("${buildDir}/zip/metadata.xml");

            def filesToSkip = project.ext.skipJsFiles.collect([]) { fileName ->
                return fileName.substring(3);
            }

            metadata.Widgets.Widget.each { widget ->
                def runtimeFiles = [];
                def designFiles = [];
                def commonFiles = [];

                def nodesToRemove = [];

                def widgetName = widget.@name;

                widget.UIResources.FileResource.each { fileResource ->
                    // Skip CSS files
                    if (fileResource.@type != "JS") return;
                    // Skip entries with URL resources
                    if (fileResource.@file == null) return;
                    // Skip entries marked ad skipping
                    if (fileResource.@file in filesToSkip) return;

                    nodesToRemove << fileResource;

                    def isDesign = fileResource.@isDevelopment == "true";
                    def isRuntime = fileResource.@isRuntime == "true";

                    if (isDesign) {
                        if (isRuntime) {
                            commonFiles << "${buildDir}/zip/ui/${widgetName}/${fileResource.@file}";
                        }
                        else {
                            designFiles << "${buildDir}/zip/ui/${widgetName}/${fileResource.@file}";
                        }
                    }
                    else {
                        runtimeFiles << "${buildDir}/zip/ui/${widgetName}/${fileResource.@file}";
                    }
                }

                // Delete the XML nodes of the files about to be combined
                nodesToRemove.each { node ->
                    node.parent().remove(node);
                }

                // Combine the files
                task "combineRuntime${widgetName}"(type: CombineJsTask) {
                    encoding = "UTF-8"
                    source = runtimeFiles
                    dest = file("${buildDir}/zip/ui/${widgetName}/${widgetName}.runtime.min.js")
                }
                task "combineDesign${widgetName}"(type: CombineJsTask) {
                    encoding = "UTF-8"
                    source = designFiles
                    dest = file("${buildDir}/zip/ui/${widgetName}/${widgetName}.ide.min.js")
                }
                task "combineCommon${widgetName}"(type: CombineJsTask) {
                    encoding = "UTF-8"
                    source = commonFiles
                    dest = file("${buildDir}/zip/ui/${widgetName}/${widgetName}.min.js")
                }

                if (runtimeFiles.size() > 0) {
                    def runtimeFileNode = XMLParser.parseText("<FileResource type=\"JS\" file=\"${widgetName}.runtime.min.js\" description=\"\" isDevelopment=\"false\" isRuntime=\"true\"/>");
                    widget.UIResources[0].append(runtimeFileNode);
                    tasks."combineRuntime${widgetName}".execute();
                }
                if (designFiles.size() > 0) {
                    def designFileNode = XMLParser.parseText("<FileResource type=\"JS\" file=\"${widgetName}.ide.min.js\" description=\"\" isDevelopment=\"true\" isRuntime=\"false\"/>");
                    widget.UIResources[0].append(designFileNode);
                    tasks."combineDesign${widgetName}".execute();
                }
                if (commonFiles.size() > 0) {
                    def commonFileNode = XMLParser.parseText("<FileResource type=\"JS\" file=\"${widgetName}.min.js\" description=\"\" isDevelopment=\"true\" isRuntime=\"true\"/>");
                    widget.UIResources[0].append(commonFileNode);
                    tasks."combineCommon${widgetName}".execute();
                }

                // Delete the old files
                runtimeFiles.each { name ->
                    file("${name}").delete();
                }
                designFiles.each { name ->
                    file("${name}").delete();
                }
                commonFiles.each { name ->
                    file("${name}").delete();
                }
            }

            // Update metadata xml
            PrintWriter pw = new PrintWriter(new File("${buildDir}/zip/metadata.xml"))
            pw.write(groovy.xml.XmlUtil.serialize(metadata))
            pw.close()

            // Minify the files
            fileTree("${buildDir}/zip/ui/") {include '**/*.js' exclude project.ext.skipJsFiles } .eachWithIndex { jsFile, index ->
                def dynamicTask = "minify$index"
                /*
                
                task "$dynamicTask" (type: MinifyJsTask) {
                    source = jsFile
                    dest = jsFile
                    closure {
                        compilationLevel = 'SIMPLE_OPTIMIZATIONS'
                        warningLevel = 'QUIET'
                        compilerOptions = [
                            languageIn: 'ECMASCRIPT6',
                            languageOut: 'ECMASCRIPT5'
                        ]
                    }
                }
                tasks."$dynamicTask".execute()
                */

        
                copy {
                    from "${jsFile}"
                    into "${jsFile}_"
                }
                
                task "$dynamicTask" (type: JavaExec) {

                    classpath configurations.closureCompiler
                    main = 'com.google.javascript.jscomp.CommandLineRunner'
                    standardOutput = System.err
                    errorOutput = System.err

                    def closureArgs = []
                    //append all your command line options here
                    closureArgs << "--compilation_level=SIMPLE_OPTIMIZATIONS"
                    closureArgs << "--language_in=ECMASCRIPT_NEXT"
                    closureArgs << "--language_out=ECMASCRIPT_2017"
                    closureArgs << "--warning_level=VERBOSE"
                    closureArgs << "--js_output_file=${jsFile}"
                    closureArgs << "--jscomp_off=checkVars"
                    closureArgs << "${jsFile}_"

                    args closureArgs
                }

                tasks."$dynamicTask".execute()

                delete "${jsFile}_"
                
            }
        }
    }
}

task prepPackage(dependsOn: ['increaseVersionNumber', 'copyUiFiles']) {
    delete project.ext.zipDir
    delete "${buildDir}/zip/"
    doLast {
        // add the entities 
        copy {
            from entitiesDir
            into "${buildDir}/zip/Entities/"
        }
    }
}

task packageExtension(type: Zip, dependsOn: prepPackage, overwrite: true) {
    version = project.version
    baseName = project.name
    extension = "zip"
    appendix = project.hasProperty('buildRelease') ? "min" : "dev"
    destinationDir = new File(project.ext.zipDir)
    from "${buildDir}/zip/"
}

task delete(dependsOn: packageExtension) {
  doLast{
    def http = new HTTPBuilder("${thingworxServerRoot}")
    def basicAuth = "${thingworxUser}:${thingworxPass}".bytes.encodeBase64().toString()
    http.setHeaders ([Authorization: "Basic ${basicAuth}", "Content-Type": "application/json"])

    def extZip = file("${baseDir}/zip/${project.name}-${project.hasProperty('buildRelease') ? "min": "dev" }-${version}.zip")

    http.request(POST) { req ->
        uri.path = '/Thingworx/Subsystems/PlatformSubsystem/Services/DeleteExtensionPackage'
        headers."X-XSRF-TOKEN" = "TWX-XSRF-TOKEN-VALUE"
        requestContentType = 'application/json'
        req.setEntity(new StringEntity("{\"packageName\": \"${packageName}\"}"));
        response.success = {resp ->
            println("Delete successful!")
        }

        response.failure = {resp ->
            println(resp.statusLine)
            throw new StopExecutionException("Thingworx delete failed! See server response above")
        }
    }
  }
}

task upload(dependsOn: delete) {
  doLast{
    def http = new HTTPBuilder("${thingworxServerRoot}/Thingworx/")
    def basicAuth = "${thingworxUser}:${thingworxPass}".bytes.encodeBase64().toString()
    http.setHeaders ([Authorization: "Basic ${basicAuth}"])

    def extZip = file("${baseDir}/zip/${project.name}-${project.hasProperty('buildRelease') ? "min": "dev" }-${version}.zip")

    http.request(POST) { req ->
        uri.path = 'ExtensionPackageUploader'
        uri.query = ['purpose': 'import']
        headers."X-XSRF-TOKEN" = "TWX-XSRF-TOKEN-VALUE"
        requestContentType = 'multipart/form-data'
        MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE)
        entity.addPart('file', new FileBody(extZip))
        req.setEntity(entity)
        response.success = {resp ->
            println("Upload successful!")
        }

        response.failure = {resp ->
            println(resp.statusLine)
            throw new StopExecutionException("Thingworx upload failed! See server response above")
        }
    }
  }
}
